library(pryr)
Testing = R6::R6Class("Testing", public=list(
 val = 3, 
 api = NULL, 
  initialize = function() {
  self$api = list(
    doOne = function() {return(1)},
    doTwo = function() {
      return(self$val);
    }
  )}, 
 doThree = function() {
   return(self$val)
   }
 )
)
test = Testing$new()
test$api$doOne()
test$api$doTwo()
test$doThree()



# Generated by maven-r-jsr223-plugin: do not edit by hand
# returns a reference to a AnotherTestRApi java class in a jsr223 engine
JavaApi = R6::R6Class("JavaApi", public=list( 
  #### fields ----
  _engine = NULL,
  _objId = 0,
  _lock = false,
  Class1 = NULL,
  Class2 = NULL,
  
  #### constructor ----
  initialize = function() {
    
    # initialise java engine
    
    class.path <- c(
      system.file("java", "groovy-all-2.4.17.jar", package="testRapi"),
      system.file("java", "maven-r-jsr223-plugin-test-1.0-SNAPSHOT-jar-with-dependencies.jar", package="testRapi")
    )	
    self$_engine = jsr223::ScriptEngine$new("groovy", class.path)
    self$_engine$setDataFrameRowMajor(FALSE)
    # set up engine
    self$_engine %@% '
      import fqn.Class1;
      import fqn.Class2;
      objs = [];
    '
    
    # initialise static class definitions
    
    Class1 = list(
      CONST_VALUE = ??
      new = function(param1, param2) {
        # constructor
        # copy parameters
        # lock engine
        # get new id
        # execute Java consturctor & store result in groovy array
        # unlock engine
        # delete parameters
        # return R class1 constructor (Class1$new(self$_engine, objId))
      },
      staticFactoryMethod = function(param1, param2) {
        # copy parameters
        # lock engine
        # get new id
        # execute method and store result in groovy array
        # unlock engine
        # wrap resulting id in R class (ReturnClass$new(self$_engine, objId))
        # delete parameters
        # return R class
      },
      staticMethod = function(param1, param2) {
        # copy parameters
        # execute function on object objId
        # delete parameters
        # return value 
      }
    )
    
    Class2 = list(
      new = function(param1, param2) {return(self$executeConstructor("Class2", param1, param2))},
      static1 = function() {},
      static2
    )
    
  }
  
  #### utility methods ----
  
  
))


Class1 = R6::R6Class("Class1", public=list(
  _javaApi = NULL,
  _objectId = NULL,
  initialize = function(javaApi,objectId){
    self$_javaApi = javaApi;
    self$_objectId = objectId;
  },
  normalMethod = function(param1, param2) {
    # store parameters in engine
    # call function on instance self$_objectId
    # delete parameters
    # return result
  },
  factoryMethod = function(param1, param2) {
    # store parameters in engine - R
    # lock engine - G/R - groovy snchrnoised block on objarray
    # getNextId from engine - G
    # call function and store result in groovy array - G
    # unlock engine - G/R
    # delete parameters - R
    # call R return type constructor with engine and id - R
    # return R return type - R
  }
))