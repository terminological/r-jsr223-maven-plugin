# Generated by maven-r-jsr223-plugin: do not edit by hand
# returns a reference to a java class in a jsr223 engine
JavaApi = R6::R6Class("JavaApi", public=list( 
	#### fields ----
	.engine = NULL,
	.objId = 0,
<#list model.getClassTypes() as class>
	${class.getName()} = NULL,
</#list>
  
 	#### constructor ----
 	initialize = function() {
	
	# initialise java engine
	
	class.path <- c(
		system.file("java", "groovy-all-2.4.17.jar", package="${model.getConfig().getPackageName()}"),
		system.file("java", "${jarFileName}", package="${model.getConfig().getPackageName()}")
	)	
	self$.engine = jsr223::ScriptEngine$new("groovy", class.path)
	self$.engine$setDataFrameRowMajor(FALSE)
	# set up engine
	self$.engine %@% '
		objs = [];
		nextObjId = 0;
	'
	
	# initialise constructor and static class definitions
<#list model.getClassTypes() as class>
	self$${class.getName()} = list(
	<#list class.getConstructors() as method>
		new = function(${method.getParameterCsv()}) {
			# constructor
			# copy parameters
		<#list method.getParameterNames() as param>
			<#if method.getParameterByValue(param)>
		self$.engine$tmp_${param} = ${param}; # copy parameter by value
			<#else>
		self$.engine %@% paste0('tmp_${param} = objs[',${param}$.objId,']');  # copy parameter by reference
			</#if>
		</#list>
			objId = self$.engine %~% '
				synchronized(objs) {
					objs[nextObjId] = new ${class.getClassName()}(${method.getParameterCsv("tmp_")});
					nextObjId = nextObjId+1 
				}
				return nextObjId-1;
			'
			# delete parameters
		<#list method.getParameterNames() as param>
			self$.engine$remove("tmp_${param}")
		</#list>
			return(${class.getName()}$new(self$.engine, objId))
		}<#sep>,
	</#list>
	<#if (class.hasStaticMethods())>,</#if>
	<#list class.getStaticMethods() as method>
		${method.getName()} = function(${method.getParameterCsv()}) {
			# copy parameters
			<#list method.getParameterNames() as param>
				<#if method.getParameterByValue(param)>
			self$.engine$tmp_${param} = ${param}; # by value
				<#else>
			self$.engine %@% paste0('tmp_${param} = objs[',${param}$.objId,']'); # by reference
				</#if>
			</#list>
			#execute static call
		 	<#if !method.byValue()>
			# execute static method and return object by reference (always creates a new instance)   
			objId = self$.engine %~% '
				synchronized(objs) {
					objs[nextObjId] = ${class.getClassName()}.${method.getName()}(${method.getParameterCsv("tmp_")});
					nextObjId = nextObjId+1 
				}
				return nextObjId-1;
			'
			# wrap resulting id in R class - static methods always create instances
			out = ${method.getReturnSimple()}$new(self$.engine, objId)
			<#else>
			# execute static method and return object by value
			out = self$.engine %~% '
				return ${class.getClassName()}.${method.getName()}(${method.getParameterCsv("tmp_")});
			'
		</#if>
			# delete parameters
		<#list method.getParameterNames() as param>
			self$.engine$remove("tmp_${param}")
		</#list>
			<#if method.getReturnType() != "void">return(out)<#else>invisible(NULL)</#if>
		}<#sep>,
	</#list>
	)
</#list>
	}
))

## a generic catch all object reference for classes that cannot be mapped to and from Java.
Object = R6::R6Class("Object", public=list(
	.engine = NULL,
	.objId = NULL,
	initialize = function(engine,objectId){
		self$.engine = engine;
		self$.objId = objectId;
	},
	print = function() {
		self$.engine$tmp2_objId = self$.objId;
		out = self$.engine %~% '
			return objs[tmp2_objId].toString();
		'
		self$.engine$remove("tmp2_objId")
		print(out)
		invisible(self)
	}
))

<#list model.getClassTypes() as class>
${class.getName()} = R6::R6Class("${class.getName()}", public=list(
	.engine = NULL,
	.objId = NULL,
	initialize = function(engine,objectId){
		self$.engine = engine;
		self$.objId = objectId;
	},
	<#list class.getInstanceMethods() as method>
	${method.getName()} = function(${method.getParameterCsv()}) {
		# copy parameters
		<#list method.getParameterNames() as param>
			<#if method.getParameterByValue(param)>
		self$.engine$tmp_${param} = ${param}; # pass parameter by value
			<#else>
		self$.engine %@% paste0('tmp_${param} = objs[',${param}$.objId,']'); # pass parameter by reference
			</#if>
		</#list>
		self$.engine$tmp2_objId = self$.objId;
		<#if !method.byValue()>
		#execute call on instance .objId returning a new (or the same) objId by reference   
		objId = self$.engine %~% '
			def tmp = objs[tmp2_objId].${method.getName()}(${method.getParameterCsv("tmp_")});
			// if the result the same object as the original? e.g. a fluent method
			if (tmp.is(objs[tmp2_objId])) {
				return tmp2_objId; 
			} else {
				synchronized(objs) {
					objs[nextObjId] = tmp;
					nextObjId = nextObjId+1; 
				}
				return nextObjId-1;
			}
		'
		<#else>
		#execute call on instance .objId returning a result by value
		out = self$.engine %~% '
			return objs[tmp2_objId].${method.getName()}(${method.getParameterCsv("tmp_")});
		'
		</#if>
		# delete parameters
		self$.engine$remove("tmp2_objId")
		<#list method.getParameterNames() as param>
		self$.engine$remove("tmp_${param}")
		</#list>
		<#if method.getReturnType() == "void">
		invisible(NULL)
		<#else>
			<#if method.byValue()>
		return(out)
			<#else>
		if (objId == self$.objId) {
			invisible(self) # e.g. a fluent method
		} else {
			out = ${method.getReturnSimple()}$new(self$.engine, objId)
			return(out)
		}
			</#if>
		</#if>
	},
	</#list>
	print = function() {
		self$.engine$tmp2_objId = self$.objId;
		out = self$.engine %~% '
			return objs[tmp2_objId].toString();
		'
		self$.engine$remove("tmp2_objId")
		print(out)
		invisible(self)
	}
))

</#list>